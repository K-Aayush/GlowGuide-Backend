// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  DERMATOLOGISTS
  ADMIN
}

enum SkinType {
  DRY
  OILY
  COMBINATION
  NORMAL
  SENSITIVE
}

enum SkinConcern {
  ACNE
  AGING
  PIGMENTATION
  SENSITIVITY
  DRYNESS
  OILINESS
  REDNESS
  UNEVEN_TEXTURE
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum NotificationType {
  APPOINTMENT
  CHAT
  SYSTEM
}

model User {
  id                   String         @id @default(uuid())
  email                String         @unique
  password             String
  name                 String         @db.VarChar(50)
  phone                String         @unique
  image                String?
  role                 Role
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  skinProfile          SkinProfile?
  routines             Routine[]
  progressLogs         ProgressLog[]
  appointmentsAsUser   Appointment[]  @relation("UserAppointments")
  appointmentsAsDerm   Appointment[]  @relation("DermatologistAppointments")
  chatsAsUser          Chat[]         @relation("UserChats")
  chatsAsDermatologist Chat[]         @relation("DermatologistChats")
  sentMessages         Message[]      @relation("SentMessages")
  notifications        Notification[]
}

model SkinProfile {
  id             String                 @id @default(uuid())
  userId         String                 @unique
  user           User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  allergies      String?
  goals          String?
  lastAssessment DateTime               @default(now())
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
  SkinType       SkinTypeOnProfile[]
  Concerns       SkinConcernOnProfile[]
}

model SkinTypeOnProfile {
  id            String      @id @default(uuid())
  skinProfileId String
  skinProfile   SkinProfile @relation(fields: [skinProfileId], references: [id], onDelete: Cascade)
  type          SkinType
}

model SkinConcernOnProfile {
  id            String      @id @default(uuid())
  skinProfileId String
  skinProfile   SkinProfile @relation(fields: [skinProfileId], references: [id], onDelete: Cascade)
  concern       SkinConcern
}

model ProductSkinType {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  type      SkinType
}

model ProductSkinConcern {
  id        String      @id @default(uuid())
  productId String
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  concern   SkinConcern
}

model Product {
  id                  String               @id @default(uuid())
  name                String
  brand               String
  description         String               @db.Text
  ingredients         String               @db.Text
  sustainabilityScore Int
  allergens           String?
  imageUrl            String?
  price               Decimal              @db.Decimal(10, 2)
  routineSteps        RoutineStep[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  suitableSkinTypes   ProductSkinType[]
  targetConcerns      ProductSkinConcern[]
}

model Routine {
  id        String        @id @default(uuid())
  userId    String
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  type      String
  steps     RoutineStep[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model RoutineStep {
  id        String   @id @default(uuid())
  routineId String
  routine   Routine  @relation(fields: [routineId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  stepOrder Int
  notes     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProgressLog {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl  String?
  notes     String?     @db.Text
  concerns  SkinConcern
  rating    Int // Scale of 1-5
  createdAt DateTime    @default(now())
}

model Appointment {
  id              String            @id @default(uuid())
  userId          String
  user            User              @relation("UserAppointments", fields: [userId], references: [id], onDelete: Cascade)
  dermatologistId String
  dermatologist   User              @relation("DermatologistAppointments", fields: [dermatologistId], references: [id], onDelete: Cascade)
  date            DateTime
  status          AppointmentStatus @default(PENDING)
  notes           String?           @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model Chat {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation("UserChats", fields: [userId], references: [id], onDelete: Cascade)
  dermatologistId String
  dermatologist   User      @relation("DermatologistChats", fields: [dermatologistId], references: [id], onDelete: Cascade)
  messages        Message[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  senderId  String
  sender    User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  content   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NotificationType
  title     String
  message   String           @db.Text
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
}
